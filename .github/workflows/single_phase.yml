name: Single-phase release strategy

on:
  push:
    tags:
      release/**

permissions:
  contents: write
  id-token: write

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - env:
          GITHUB_CONTEXT: ${{ toJson(github.event) }}
        run: echo $GITHUB_CONTEXT | jq .

  plan_release:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    outputs:
      plan_result: ${{ steps.plan.outputs.exitcode }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true
      - uses: actions/setup-go@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          go-version-file: go.mod
      - run: terraform init
      - id: plan
        if: always()
        env:
          TF_VAR_release_identifier: ${{ env.GITHUB_REF }}
        run: terraform plan -detailed-exitcode -input=false -no-color -out=tfplan
      - run: echo "Plan exit code was ${{ steps.plan.outputs.exitcode }}"
      - name: Reformat Plan
        id: reformat_plan
        if: always() && steps.plan.outcome != 'cancelled' && steps.plan.outcome != 'skipped'
        run: terraform show -no-color tfplan | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > terraform_plan.txt
      - name: Encrypt plan
        id: encrypt_plan
        env:
          GPG_PASSPHRASE: ${{ secrets.TFPLAN_SECRET }}
        run: echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --symmetric --cipher-algo AES256 tfplan
      - run: rm tfplan
      - name: Store terraform artifacts
        uses: actions/upload-artifact@v3
        with:
          name: terraform-${{ github.sha }}
          path: ${{ github.workspace }}/terraform
      - name: Store executable artifacts
        uses: actions/upload-artifact@v3
        with:
          name: bin-${{ github.sha }}
          path: ${{ github.workspace }}/bin

  deploy_release:
    runs-on: ubuntu-latest
    environment: production
    needs:
      - plan_release
    if: needs.plan_release.outputs.plan_result == 2
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: hashicorp/setup-terraform@v2
      - name: Restore terraform artifacts
        id: restore_terraform
        uses: actions/download-artifact@v3
        with:
          name: terraform-${{ github.sha }}
          path: ${{ github.workspace }}/terraform
      - run: terraform init
      - run: echo "Working directory is $PWD"
      - name: Show contents
        run: ls -lahR
      - name: Restore executable artifacts
        id: restore_executables
        uses: actions/download-artifact@v3
        with:
          name: bin-${{ github.sha }}
          path: ${{ github.workspace }}/bin
      - id: decrypt_plan
        if: always() && steps.restore_terraform.outcome != 'skipped' && steps.restore_terraform.outcome != 'cancelled'
        env:
          GPG_PASSPHRASE: ${{ secrets.TFPLAN_SECRET }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$GPG_PASSPHRASE" --output tfplan tfplan.gpg
      - run: rm tfplan.gpg
      - id: apply
        if: always() && steps.decrypt_plan.outcome != 'cancelled' && steps.decrypt_plan.outcome != 'skipped'
        run: terraform apply tfplan
      - name: Update release
        if: always() && steps.apply.outcome == 'success'
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release edit

  update_release:
    runs-on: ubuntu-latest
    needs:
      - deploy_release
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - run: gh release view $GITHUB_REF --json body --jq .body > release_notes.md
      - run: printf "\n\nSuccessfully deployed at $(date --iso-8601=seconds)\n" >> release_notes.md
      - run: gh release edit $GITHUB_REF --latest --verify-tag -notes-file release_notes.md
