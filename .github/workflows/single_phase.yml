name: Single-phase release strategy

on:
  push:
    tags:
      release/**

permissions:
  contents: write
  id-token: write

concurrency: production

jobs:
  plan:
    name: Plan Deployment
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    outputs:
      terraform_plan_exitcode: ${{ steps.terraform_plan.outputs.exitcode }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true
      - uses: actions/setup-go@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          go-version-file: go.mod
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        id: terraform_plan
        env:
          TF_VAR_release_identifier: ${{ github.ref_name }}
        run: terraform plan -detailed-exitcode -input=false -no-color -out=tfplan
      - name: Generate plaintext plan
        id: show_plan
        run: terraform show -no-color tfplan
      - name: Reformat Plan
        run: |
          echo '${{ steps.show_plan.outputs.stdout || steps.show_plan.outputs.stderr }}' \
            | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
          PLAN=$(cat plan.txt | head -c 65300)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Write the step summary
        run: |
          REPORT_FILE=$(mktemp -t summary.md.XXXXX )
          echo "REPORT_FILE=$REPORT_FILE" >> $GITHUB_ENV
          cat >> $REPORT_FILE << 'ENDOFREPORT'
          ## Terraform Plan Result

          <details>
          <summary>Output</summary>

          ```diff
          ${{ env.PLAN }}
          ```

          </details>
          ENDOFREPORT
          cat $REPORT_FILE >> $GITHUB_STEP_SUMMARY
      - name: Encrypt terraform plan file
        env:
          PASSPHRASE: ${{ secrets.TFPLAN_SECRET }}
        run: |
          echo "$PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 -c --cipher-algo AES256 tfplan
          rm tfplan
      - name: Store terraform artifacts
        uses: actions/upload-artifact@v3
        with:
          name: terraform-${{ github.sha }}
          path: |
            ${{ github.workspace }}/terraform
            !${{ github.workspace }}/terraform/.terraform
      - name: Store executable artifacts
        uses: actions/upload-artifact@v3
        with:
          name: bin-${{ github.sha }}
          path: ${{ github.workspace }}/bin

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    needs:
      - plan
    if: always() && needs.plan.outputs.terraform_plan_exitcode == 2
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: hashicorp/setup-terraform@v2
      - name: Restore terraform artifacts
        uses: actions/download-artifact@v3
        with:
          name: terraform-${{ github.sha }}
          path: ${{ github.workspace }}/terraform
      - name: Restore executable artifacts
        uses: actions/download-artifact@v3
        with:
          name: bin-${{ github.sha }}
          path: ${{ github.workspace }}/bin
      - name: Decrypt terraform plan file
        env:
          GPG_PASSPHRASE: ${{ secrets.TFPLAN_SECRET }}
        run: echo "$GPG_PASSPHRASE" | gpg -qd --batch --yes --passphrase-fd 0 -o tfplan tfplan.gpg
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply
        run: terraform apply tfplan

  update_release:
    name: Update release
    runs-on: ubuntu-latest
    needs:
      - deploy
    env:
      GH_TOKEN: ${{ github.token }}
      RELEASE_TAG: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v3
      - name: Get release notes
        id: get
        continue-on-error: true
        run: gh release view $RELEASE_TAG --json body --jq .body > release_notes.md
      - name: Add deployment history to release notes
        if: always() && steps.get.outcome == 'success'
        run: printf "\n\n- Deployed at $(date --iso-8601=seconds)\n" >> release_notes.md
      - name: Update release notes and status
        if: always() && steps.get.outcome == 'success'
        run: gh release edit $RELEASE_TAG --draft=false --prerelease=false --latest --verify-tag -F release_notes.md
